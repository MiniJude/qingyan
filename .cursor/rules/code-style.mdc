---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---

### 1. **Unocss样式使用**
- 在给组件应用Unocss样式时，务必使用`class=""`进行包裹，避免直接将样式作为属性使用。

### 2. **样式书写规范**
- 在编写新的HTML代码时，尽可能使用Unocss来完成样式的设置。
- 对于第三方组件的非根节点样式，建议使用SCSS进行处理。
- 在写`<style scoped>`标签内的样式代码时，请加上lang=scss，使用scss语法编写。

### 3. **遵循DRY原则**
- 在编写业务代码（HTML、JS等）时，务必遵循**DRY（Don't Repeat Yourself）原则**，尽可能复用代码，减少重复部分。

### 4. **使用 TypeScript 类型定义 props**
- 在定义组件的`props`时，应该使用使用 TypeScript 类型定义 props，而不要使用 Options API 风格的对象语法定义 props。如下示例：
  
  ```typescript
  // should: 
  // 定义组件的props
  interface Props {
    visible?: boolean
  }
  const props = withDefaults(defineProps<Props>(), {
    visible: false,
  })


  // don't
  const props = defineProps({
    visible: {
      type: Boolean,
      default: false,
    }
  })
  ```

### 5. **页面跳转处理**
- 页面跳转的触发元素如果真实展示在DOM中，必须使用`NuxtLink`进行跳转，这有利于SEO优化。
- 页面跳转时，必须使用`localePath`函数来包裹跳转路径，因为项目使用了国际化。`localePath`可以返回当前语言下的目标路径：

  ```ts
  const localePath = useLocalePath()

  navigate.to(localePath('/xxx'))
  ```

  如果使用`NuxtLink`实现跳转，示例如下：

  ```html
  <NuxtLink :to="localePath('/xxx')">
  ```

### 6. **函数声明方式**
- 在编写生成函数时，**请使用`function`声明**，避免使用`const`来声明函数表达式：

  ```ts
  function add() {}
  // don't
  const add = () => {}
  ```


### 7. **优先使用Element-plus组件**

新增html代码时，优先使用项目的组件库Element-plus来实现。比如：
- 要用el-button，而不要用button
- 上传相关优先使用el-upload，而不是手写拖拽等实现上传
- 要用<el-divider />,而不要用自己写<div class="divider" />
- Element Plus图标使用具名导入方式，比如 import { ArrowDown } from '@element-plus/icons-vue'


### 8. **业务组件职责分离**

- 封装业务组件时，如果和其父组件没有明显联动需求，就无需向父组件暴露方法或者emit事件

### 9. **使用async await的异步编程风格**

- 在涉及到异步编程时，请使用async await的编程风格，不要使用Promise.then的风格
- 捕获异常时请使用try catch，不要使用Promise.catch

比如：
```ts
// should:
async function submitRegister() {
  try {
    await registerFormRef.value?.validate()
    // 校验成功
  } catch (error) {
    // 校验失败
  }
}

// don't:
function submitRegister() {
  registerFormRef.value?.validate((valid) => {
    if (valid) {
      // 校验成功
    } else {
      // 校验失败
    }
  })
}
```

### 10. **优先使用vueuse库**

- 实现功能时，优先查找本项目的vueuse版本是否支持响应的hook，如果有则使用vueuse封装好的

### 11. **使用我自己封装的$api 或者 useAPI来发起http请求**

- 请不要使用原生的fetch方法来发起http请求

- 请使用我自己封装的$api 或者 useAPI来发起http请求

- $api和useAPI文件路径在app\composables\useApi.ts，但请注意你不需要显示导入，因为写在composables目录下的export函数会自动注册到全局

- 写法示例：
```ts

// should:
const data = await $api(`/api/member/vcode/?phone=${encodeURIComponent(phoneWithPrefix)}`)

// don't
const response = await fetch(`/api/member/vcode/?phone=${encodeURIComponent(phoneWithPrefix)}`)
const data = await response.json()

```


### 12. **使用 TypeScript 类型定义 emit**
- 在定义组件的`emit`时，应该使用使用 TypeScript 类型定义 emit，而不要使用defineEmits的运行时定义 props。如下示例：
  
  ```typescript
  // should: 
  const emit = defineEmits<{
    (e: 'update:currentStep', value: number): void
    (e: 'update:modelValue', value: boolean): void
  }>()


  // don't
  const emit = defineEmits(['update:currentStep', 'update:modelValue'])
  ```

### 13. **以下模块的内容无需显示导入**

- `app\utils`下的方法

- `app\components`下的组件


### 14. **国际化时的注意事项**

#### 国际化路劲

国际化配置文件路径为**项目根目录**下（i18n的文件夹和app文件夹、nuxt.config.ts同级）：
  - `/i18n/locales/en.json`
  - `/i18n/locales/zh-CN.json`

#### 国际化代码细节

- 公共通用的国际化词汇请统一放置在 `common` 配置对象中。

- 新增国际化内容时，请优先检查现有配置：
  - 如果已有可复用的配置，请直接使用。
  - 如果没有合适的配置，则新增配置项。
  - 尽量使用公共的国际化配置来组合，比如"创建成功"要拆分为"创建" + "成功"。



#### 业务代码中的国际化管理

- 涉及需要国际化的文本时，必须在**项目根目录**下的 `/i18n/locales` 文件夹下的对应语言文件中完成中英文翻译配置。

- 无论是新增、修改还是删除业务代码，均需注意检查国际化配置的引用情况：
  - 若删除或修改的代码中包含国际化内容，且确认该国际化配置未被其他代码引用，应及时从国际化文件中移除，避免冗余。


#### 使用Element-plus的Message时，要加上下文appContext（通过getCurrentInstance()获取）

在nuxt3中使用Dialog和Message时，Message会被Dialog遮罩层覆盖，Message是无法获取应用上下文引起的。

相关issue：https://github.com/element-plus/element-plus-nuxt/issues/146

代码示例：
```ts
<script setup lang="ts">
import { getCurrentInstance } from 'vue'

const { appContext } = getCurrentInstance()!

const hello = () => {
  show.value = true;
  // ElMessage.info("hello world")
};
const show = ref(false);
const onClick = ()=>{
  ElMessage.success({ message: "hello world", duration: 0 }, appContext)

  // or
  // ElMessageBox.confirm({}, appContext)
}

</script>
```
请注意无论是ElMessage.success还是ElMessageBox.confirm**等等**，都要加appContext参数。





